#include <glib.h>
#include <string>
#include <luna-service2/lunaservice.h>
#include <wiringPi.h>
#include <json-c/json.h>
#include "./include/logging.h"

static bool cbHello(LSHandle *sh, LSMessage* message, void* ctx)
{
    int i=0;
    std::string answer = "{\"returnValue\": true, \"gpio\": \"hello gpiotest!!\"}";
    LSError lserror;
    json_object *pinObj;
    json_object *pinNum;
    int num;
   
    GPIO_LOG_DEBUG("GPIO TEST");
    pinObj = json_tokener_parse(LSMessageGetPayload(message));
    if(json_object_object_get_ex(pinObj, "pinNum",&pinNum)) {
       num = json_object_get_int(pinNum);
    }else {
       GPIO_LOG_DEBUG("ERROR!!");
       num = 0;
       return false;
    }

    if (!LSMessageReply(sh, message, answer.c_str(), &lserror))
    {
        g_print("Message reply error!!\n");
        LSErrorPrint(&lserror, stdout);
 
        return false;
    }
    pinMode(num, OUTPUT);
    for(i=0; i<5; i++) {
       digitalWrite(num,1);
       delay(1000);
       digitalWrite(num,0);
       delay(1000);
    }
    return true;
}

static bool setWiringPi(LSHandle *sh, LSMessage* message, void *ctx) 
{
    std::string answer = "{\"returnValue\": true, \"Setup\": \"success!!\"}";
    LSError lserror;
   
    if(wiringPiSetup() == -1) 
    {
        g_print("setup error!\n");
        LSErrorPrint(&lserror, stdout);
	return false;
    }

    if (!LSMessageReply(sh, message, answer.c_str(), &lserror))
    {
        g_print("Message reply error!!\n");
        LSErrorPrint(&lserror, stdout);

        return false;
    }
    return true;
}
/*
static bool setPinNum(LSHandle *sh, LSMessage* message, void* ctx)
{
    char* str = (char*)ctx;
    
    json_object *pinObj;
    json_object *pinNum;

    pinObj = json_tokener_parse(str);
    pinNum = json_object_object_get(pinObj,"pinNum");
    g_print("pinNum is %d\n",json_object_get_int(pinNum));

    return true;
}
*/
static bool setPinMode(LSHandle *sh, LSMessage* message, void* ctx)
{

   std::string answer= "{\"returnValue\": true, \"setPinMode\": \"success!!\"}"; 
   LSError lserror;
  
   json_object *pinObj;
   json_object *pinNum, *pinMod;/*OUTPUT for 1 or IN for 0*/
   int num, mode;
  
   pinObj = json_tokener_parse(LSMessageGetPayload(message));
   if(json_object_object_get_ex(pinObj, "pinNum",&pinNum) && json_object_object_get_ex(pinObj, "pinMode", &pinMod)) {
      num = json_object_get_int(pinNum);
      mode = json_object_get_int(pinMod);
   }else {
      num = 0;
      mode = 0;
      return false;
   }
   pinMode(num, mode);
   
   if (!LSMessageReply(sh, message, answer.c_str(), &lserror))
   {
       g_print("Message reply error!!\n");
       LSErrorPrint(&lserror, stdout);
       return false;
   }

    return true;
}

static bool digitWrite(LSHandle *sh, LSMessage* message, void* ctx) {
   
   
   json_object *pinObj;
   json_object *pinNum, *pinWrite;/*0 or 1 what to write for GPIO*/
   int num , write;
   pinObj = json_tokener_parse(LSMessageGetPayload(message));
   if(json_object_object_get_ex(pinObj, "pinNum",&pinNum) && json_object_object_get_ex(pinObj, "pinWrite", &pinWrite)) {
      num = json_object_get_int(pinNum);
      write = json_object_get_int(pinWrite);
   }else {
      num = 0;
      write = 0;
      return false;
   }
   digitalWrite(num, write);
   
   return true;
}
 
static LSMethod serviceMethods[] = {
    {"gpio", cbHello}, {"setWiringPi", setWiringPi}, {"setPinMode", setPinMode}, {"digitWrite", digitWrite} 
};
 
int main(int argc, char* argv[])
{
    g_print("Start com.gpiotest.service.native\n");
 
    LSError lserror;
    LSErrorInit(&lserror);
 
    GMainLoop* mainLoop = g_main_loop_new(nullptr, false);
    LSHandle *m_handle = nullptr;   
 
    if(!LSRegister("com.gpiotest.service.native", &m_handle, &lserror))
    {
        g_print("Unable to register to luna-bus\n");
        LSErrorPrint(&lserror, stdout);
 
        return false;
    }
 
    if (!LSRegisterCategory(m_handle, "/", serviceMethods, NULL, NULL, &lserror))
    {
        g_print("Unable to register category and method\n");
        LSErrorPrint(&lserror, stdout);
 
        return false;
    }
 
    if(!LSGmainAttach(m_handle, mainLoop, &lserror))
    {
        g_print("Unable to attach service\n");
        LSErrorPrint(&lserror, stdout);
 
        return false;
    }
 
    g_main_loop_run(mainLoop);
 
    if(!LSUnregister(m_handle, &lserror))
    {
        g_print("Unable to unregister service\n");
        LSErrorPrint(&lserror, stdout);
 
        return false;
    }
 
    g_main_loop_unref(mainLoop);
    mainLoop = nullptr;
 
    return 0;
}
